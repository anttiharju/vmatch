{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p><code>vmatch</code> is a fully automated version manager for Go and golangci-lint:</p> <ol> <li>Developer using vmatch never has to manually update their environment to match their project.</li> <li>Versions specified in <code>go.mod</code> and <code>.golangci-version</code> are downloaded and used automatically, on-demand.</li> <li>This allows projects to 'rust'; a project with <code>vmatch</code>-supported structure will keep working as it was when last touched. No more \"can't install the right version of Go with brew\".</li> </ol>"},{"location":"#faq","title":"FAQ","text":""},{"location":"#q-what-about-httpsgodevblogtoolchain","title":"Q: What about https://go.dev/blog/toolchain?","text":"<p>A: Toolchain is about forward-compatibility, <code>vmatch</code> installs the Go version specified in your project. I have found Go's promises of backward-compatibility to be squishy in practice, <code>brew install go</code> has not been sufficient for some project setups.</p>"},{"location":"#q-what-about-go-run-go-124-and-after-go-run-calls-are-cached","title":"Q: What about <code>go run</code>? (Go 1.24 and after <code>go run</code> calls are cached)","text":"<p>A: It is probably the easy thing to introduce to your team and is a fine addition to Go.</p>"},{"location":"#q-what-about-httpsgithubcomnix-communitynix-direnv","title":"Q: What about https://github.com/nix-community/nix-direnv?","text":"<p>A: It is better, if you can get the buy-in for Nix.</p>"},{"location":"#q-how-does-this-compare-to-httpsmisejdxdevdev-toolsshimshtmlshims","title":"Q: How does this compare to https://mise.jdx.dev/dev-tools/shims.html#shims?","text":"<p>A: It is pretty much exactly like mise shims.</p>"},{"location":"#q-go-binaries-downloaded-by-vmatch-dont-work-on-nixos","title":"Q: Go binaries downloaded by vmatch don't work on NixOS","text":"<p>A: It is some versions of Go binaries supplied by Google are dynamically linked (on Linux you can check with <code>ldd</code>). I am personally a Nix on macOS user and know others who use Nix of Arch, where vmatch happens to work.</p>"},{"location":"#q-should-i-use-this","title":"Q: Should I use this?","text":"<p>A: If it is helpful to you, yes. Given the other projects mentioned above (Nix and mise) this wouldn't be my go-to solution (pun intended) and one can view it as more of a nontrivial playground for my CI, packaging, and Git hooks setups.</p>"},{"location":"#why","title":"Why","text":"<p>Collaborators using different versions of <code>golangci-lint</code> may get different output, leading to confusion and wasted time in code reviews. Ideally, a team would agree to use <code>vmatch</code> as their source for <code>go</code> and <code>golangci-lint</code>. That way, they would always have the right version installed.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>brew install anttiharju/tap/vmatch\n</code></pre> <p>and afterwards for further instructions run</p> <pre><code>vmatch doctor\n</code></pre> <p>Mainly, you should have <code>~/.vmatch/bin</code> in your PATH.</p>"},{"location":"#updating","title":"Updating","text":"<pre><code>brew update &amp;&amp; brew upgrade vmatch\n</code></pre>"},{"location":"#integrations","title":"Integrations","text":""},{"location":"#vs-code","title":"VS Code","text":""},{"location":"#go","title":"Go","text":"<p>Open your project via <code>code .</code> or similar from your shell where <code>vmatch doctor</code> reports the installation as healthy to ensure a vmatch-managed version of Go is available.</p>"},{"location":"#golangci-lint","title":"golangci-lint","text":"<p>Follow guidance at https://golangci-lint.run/welcome/integrations/#visual-studio-code but specify the full path of your ~/.vmatch/bin/golangci-lint as an alternate lint tool, like this:</p> <pre><code>  \"go.alternateTools\": {\n    \"lintTool\": \"/Users/antti/.vmatch/bin/golangci-lint\",\n  },\n</code></pre>"},{"location":"#renovate","title":"Renovate","text":"<p>I think one can configure Renovate to maintain the <code>.golangci-version</code> file for you, see https://www.jvt.me/posts/2022/12/15/renovate-golangci-lint/ for an example.</p>"},{"location":"#how","title":"How","text":"<p><code>vmatch</code> traverses the filesystem upwards until it finds the file <code>.golangci-version</code> and <code>go.mod</code>. These files should be in the same directory, but it is not enforced.</p> <p>Go versions are downloaded from Google servers and stored under <code>~/.vmatch</code>, like this:</p> <pre><code>.vmatch\n\u251c\u2500\u2500 bin\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 go\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 golangci-lint\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 gopls -&gt; /Users/antti/go/bin/gopls\n\u251c\u2500\u2500 go\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 v1.21.0\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 v1.23.0\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 v1.23.5\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 v1.24.2\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 v1.24.3\n\u2514\u2500\u2500 golangci-lint\n    \u251c\u2500\u2500 v1.63.4\n    \u2514\u2500\u2500 v2.1.6\n\n11 directories, 3 files\n</code></pre> <p>Contents of <code>~/.vmatch/bin</code> are symlinked from <code>$(go env GOPATH)/bin</code>, expect for <code>go</code> or <code>golangci-lint</code> which are shims, i.e. shell scripts that wrap <code>vmatch</code>.</p>"},{"location":"#usage","title":"Usage","text":"<p>After you have completed the installation, you can simply use <code>go</code> and <code>golangci-lint</code> as usual, as long as there's a <code>.golangci-version</code> or <code>go.mod</code> file available in current directory or above.</p> <p>Note that when a version is downloaded for the first time, your commands may appear to hang. The time it takes depends on your internet speed and computer.</p>"},{"location":"#stargazers-over-time","title":"Stargazers over time","text":""},{"location":"commands/doctor/","title":"doctor","text":"<pre><code>vmatch doctor\n</code></pre> <p>Tells you whether your installation is healthy, upon success you should see:</p> <pre><code>\u2705 vmatch installation is healthy.\n</code></pre>"},{"location":"commands/go/","title":"go","text":"<pre><code>vmatch go # followed by any args you would give to go\n</code></pre> <p>This command is not meant to be used directly, but rather through <code>~/.vmatch/bin/go</code> which should be the <code>go</code> in your PATH. Whether this is the case can be verified with <code>vmatch doctor</code></p>"},{"location":"commands/golangci-lint/","title":"golangci-lint","text":"<pre><code>vmatch golangci-lint # followed by any args you would give to golangci-lint\n</code></pre> <p>This command is not meant to be used directly, but rather through <code>~/.vmatch/bin/golangci-lint</code> which should be the <code>golangci-lint</code> in your PATH. Whether this is the case can be verified with <code>vmatch doctor</code></p>"},{"location":"commands/version/","title":"version","text":"<pre><code>vmatch version\n</code></pre> <p>Prints out installed vmatch version in the following format:</p> <pre><code>vmatch has version 1.0.1 built with go1.24.3 from c675e288 on 2025-05-30T19:20:58Z\n</code></pre>"}]}