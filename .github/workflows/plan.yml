name: Plan
permissions:
  contents: none
  pull-requests: none
on:
  pull_request:
    # https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#pull_request
    # defaults: opened, synchronize, reopened
    types: [opened, synchronize, reopened, labeled, unlabeled]
    paths:
      - "!flake.nix"
      - "!flake.lock"
  workflow_call:
    inputs:
      container:
        type: string
        required: false
    outputs:
      version:
        description: "Version for the next release. Empty if no release is needed."
        value: ${{ github.event.repository.name != 'go-starter' && jobs.validate.outputs.version || '' }}
      documentation:
        description: "Whether to update the documentation website"
        value: ${{ jobs.validate.outputs.documentation_changed == 'true' }}

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-24.04
    container:
      image: ${{ inputs.container || format('ghcr.io/{0}/{1}-ci:0.1.0', github.repository_owner, github.event.repository.name) }}
    steps:
      - name: Find changes
        id: changes
        uses: anttiharju/actions/find-changes@v0

      - name: Detect changes
        id: changed
        uses: ./.github/actions/detect-changes
        with:
          changes: ${{ steps.changes.outputs.array }}

      - if: always() && !cancelled() && (steps.changed.outputs.binary == 'true' || steps.changed.outputs.release == 'true' || github.event_name == 'push')
        id: semantic
        name: Require semantic version label
        uses: anttiharju/actions/semver-label@v0
        with:
          require: ${{ steps.changed.outputs.binary == 'true' || steps.changed.outputs.release == 'true' }}

      - if: always() && !cancelled()
        name: action-validator
        run: |
          git ls-files -z ".github/*/*.yml" "*/action.yml" | xargs -0 action-validator --verbose

      - if: always() && !cancelled() && (steps.changed.outputs.github_actions_workflows == 'true' || github.event_name == 'push')
        name: actionlint
        run: |
          actionlint -color

      - if: always() && !cancelled()
        name: relcheck
        run: |
          relcheck all --verbose --color=always

      - if: always() && !cancelled()
        name: EditorConfig-Checker
        run: |
          git ls-files -z | xargs -0 editorconfig-checker

      - if: always() && !cancelled() && (steps.changed.outputs.binary == 'true' || github.event_name == 'push')
        name: go build
        run: |
          go build

      - if: always() && !cancelled() && (steps.changed.outputs.binary == 'true' || github.event_name == 'push')
        name: go test
        shell: sh
        run: |
          go test ./...

      - if: always() && !cancelled() && (steps.changed.outputs.go_code == 'true' || github.event_name == 'push')
        name: golangci-lint
        run: golangci-lint run

      - if: always() && !cancelled()
        name: Keep .yml
        run: |
          YAML_FILES=$(git ls-files -z '*.yaml')
          if [ -n "$YAML_FILES" ]; then
            echo "Found the following .yaml files. Please use .yml extension instead."
            echo "$YAML_FILES" | tr '\0' '\n'
            exit 1
          fi
          echo "No .yaml files found. Good job!"

      - if: always() && !cancelled() && (steps.changed.outputs.documentation == 'true' || github.event_name == 'push')
        name: mkdocs
        run: mkdocs build --strict

      - if: always() && !cancelled() && (steps.changed.outputs.md_and_yml == 'true' || github.event_name == 'push')
        name: prettier
        run: |
          prettier "{*.yml,*.md}" --check

      - if: always() && !cancelled() && (steps.changed.outputs.brew == 'true' || github.event_name == 'push')
        name: Rubocop formula
        uses: ./.github/actions/rubocop-formula

      - if: always() && !cancelled() && (steps.changed.outputs.scripts == 'true' || github.event_name == 'push')
        name: shellcheck
        run: |
          git ls-files -z '*.sh' | xargs -0 shellcheck --color=always
    outputs:
      version: ${{ steps.semantic.outputs.version }}
      documentation_changed: ${{ steps.changed.outputs.documentation }}
